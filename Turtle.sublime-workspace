{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"entt",
				"entt.hpp\t(LuaScriptBinder.h)"
			],
			[
				"meta",
				"meta_any\tabc"
			],
			[
				"names",
				"namespace\t(ComponentUI.cpp)"
			],
			[
				"tiles",
				"tileSetComponent\tabc"
			],
			[
				"Displa",
				"DisplayPallette\tabc"
			],
			[
				"tileSet",
				"tileSetComponent\tabc"
			],
			[
				"entiy",
				"entityID\tabc"
			],
			[
				"Selec",
				"SelectedX\tabc"
			],
			[
				"display",
				"displayPallette\tabc"
			],
			[
				"Compne",
				"Components.h\t(ComponentSerializers.cpp)"
			],
			[
				"ParticleS",
				"ParticleSpawnerComponent\tabc"
			],
			[
				"Nativ",
				"NativeScriptComponent\tabc"
			],
			[
				"Transform",
				"TransformComponent\tabc"
			],
			[
				"Trans",
				"TransformComponent\tabc"
			],
			[
				"CreateFrom",
				"CreateFromBounds\t(SubTexture2D.cpp)"
			],
			[
				"emp",
				"emplace_back\tabc"
			],
			[
				"Posit",
				"Positions\tabc"
			],
			[
				"TileMap",
				"TileMapComponent\tabc"
			],
			[
				"Begin",
				"BeginSeq\tabc"
			],
			[
				"TURT_KEY_LEF",
				"TURT_KEY_LEFT_CONTROL\t(KeyCodes.h)"
			],
			[
				"Open",
				"OpenSceneFile\tabc"
			],
			[
				"mFi",
				"m_FileDialogue\tabc"
			],
			[
				"m_File",
				"m_FileDialogue\t(EditorLayer.h)"
			],
			[
				"Deser",
				"DeserializeScene\tabc"
			],
			[
				"Serial",
				"SerializeScene\tabc"
			],
			[
				"part",
				"particleProps\tabc"
			],
			[
				"Get",
				"GetComponent\t(EditorLayer.cpp)"
			],
			[
				"deser",
				"deserializedEntity\tabc"
			],
			[
				"Tag",
				"TagComponent\tabc"
			],
			[
				"Color",
				"ColorBegin\tabc"
			],
			[
				"yaml",
				"yaml_cpp\tabc"
			],
			[
				"Comp",
				"Components.h\t(SceneHeirarchyPanel.cpp)"
			],
			[
				"Veloc",
				"Velocity\tabc"
			],
			[
				"Velocit",
				"VelocityVariation\tabc"
			],
			[
				"End",
				"EndPopup\tabc"
			],
			[
				"Create",
				"CreateEntity\tabc"
			],
			[
				"tran",
				"translate\t(Renderer2D.cpp)"
			],
			[
				"Asset",
				"AssetMAnager.h\t(AssetManager.cpp)"
			],
			[
				"sele",
				"selectid\tabc"
			],
			[
				"m_Se",
				"m_SelectedFile\tabc"
			],
			[
				"c",
				"c_str\tabc"
			],
			[
				"files",
				"filesystem\tabc"
			],
			[
				"imgui",
				"imgui.h\t(EditorLayer.cpp)"
			],
			[
				"m_",
				"m_Context\tabc"
			],
			[
				"Sho",
				"ShowDemoWindow\t(imgui_demo.cpp)"
			],
			[
				"m_Vi",
				"m_ViewportWidth\tabc"
			],
			[
				"m_View",
				"m_ViewportHeight\tabc"
			],
			[
				"Projection",
				"ProjectionType\t(SceneHeirarchyPanel.cpp)"
			],
			[
				"Camer",
				"Camera\t(SceneHeirarchyPanel.cpp)"
			],
			[
				"m_C",
				"m_ComponentDialogue\tabc"
			],
			[
				"Sprite",
				"SpriteRendererComponent\tabc"
			],
			[
				"m_Compone",
				"m_ComponentType\tabc"
			],
			[
				"Im",
				"ImVec2\t(SceneHeirarchyPanel.cpp)"
			],
			[
				"ListBox",
				"ListBoxFooter\t(imgui_demo.cpp)"
			],
			[
				"ResetSat",
				"ResetState\t(ComponentAddPanel.cpp)"
			],
			[
				"Component",
				"ComponentAddPanel.h\t(ComponentAddPanel.cpp)"
			],
			[
				"Com",
				"ComponentAddPanel\t(ComponentAddPanel.h)"
			],
			[
				"Co",
				"Component\tabc"
			],
			[
				"Scene",
				"SceneHeirarchyPanel\tabc"
			],
			[
				"Sp",
				"SpriteRendererComponent\tabc"
			],
			[
				"Add",
				"AddComponenet\t(Scene.cpp)"
			],
			[
				"square",
				"square2\tabc"
			],
			[
				"sprite",
				"spriteComponent\tabc"
			],
			[
				"Fixed",
				"FixedAspectRatio\t(Scene.cpp)"
			],
			[
				"camera",
				"cameraComponent\tabc"
			],
			[
				"m_Per",
				"m_PerspectiveNear\tabc"
			],
			[
				"m_Pers",
				"m_PerspectiveFov\tabc"
			],
			[
				"m_Proje",
				"m_ProjectionType\tabc"
			],
			[
				"m_Pro",
				"m_ProjectionType\t(SceneCamera.h)"
			],
			[
				"Camera",
				"CameraComponent\tabc"
			],
			[
				"Pro",
				"ProjectionType\tabc"
			],
			[
				"Texture",
				"TextureManager\t(Scene.cpp)"
			],
			[
				"m_Text",
				"m_TextureMap\tabc"
			],
			[
				"Transf",
				"TransformComponent\tabc"
			],
			[
				"valur",
				"value_ptr\t(EditorLayer.cpp)"
			],
			[
				"Transfo",
				"TransformComponent\t(EditorLayer.cpp)"
			],
			[
				"m_Enti",
				"m_EntityHandle\tabc"
			],
			[
				"TreeNode",
				"TreeNodeEx\t(imgui_demo.cpp)"
			],
			[
				"m_Scene",
				"m_SceneHeirarchy\t(EditorLayer.h)"
			],
			[
				"Instance",
				"InstantiateScript\t(Components.h)"
			],
			[
				"m_Camera",
				"m_CameraEntity\tabc"
			],
			[
				"Insta",
				"InstantiateFunction\t(Components.h)"
			],
			[
				"orht",
				"orthoSize\tabc"
			],
			[
				"m_Ortho",
				"m_OrthographicSize\tabc"
			],
			[
				"m_Orthogra",
				"m_OrthographicFar\tabc"
			],
			[
				"m_Or",
				"m_OrthographicNear\tabc"
			],
			[
				"ort",
				"orthoRight\tabc"
			],
			[
				"Scne",
				"SceneCamera\tabc"
			],
			[
				"null",
				"nullptr\t(Entity.h)"
			],
			[
				"TRans",
				"TransformComponent\tabc"
			],
			[
				"m_Camer",
				"m_CameraEntity\t(EditorLayer.h)"
			],
			[
				"glm",
				"glm.hpp\t(Scene.cpp)"
			],
			[
				"Ortho",
				"OrthographicCamera.h\t(Turtle.h)"
			],
			[
				"En",
				"Entity\t(Scene.h)"
			],
			[
				"ent",
				"entity\tabc"
			],
			[
				"Tran",
				"TransformComponent\tabc"
			],
			[
				"m_Vew",
				"m_ViewportHovered\tabc"
			],
			[
				"m_Ve",
				"m_ViewportFocused\tabc"
			],
			[
				"ImGui",
				"ImGui\tabc"
			],
			[
				"m_vi",
				"m_ViewportFocused\tabc"
			],
			[
				"Renderer",
				"RendererAPI\tabc"
			],
			[
				"TURT_",
				"TURT_PROFILE_FUNCTION\t(EditorLayer.cpp)"
			],
			[
				"view",
				"viewportPanelSize\tabc"
			],
			[
				"Windowswind",
				"WindowsWindow.h\t(WindowsWindow.cpp)"
			],
			[
				"Core",
				"Core.h\t(Application.h)"
			],
			[
				"g",
				"glad.h\t(OpenGLTexture.h)"
			],
			[
				"Frame",
				"Framebuffer\tabc"
			],
			[
				"dockign",
				"dockingEnabled\tabc"
			],
			[
				"pubi",
				"public\t(Texture.h)"
			],
			[
				"Ren",
				"Renderer2D\tabc"
			],
			[
				"spir",
				"spriteSize\tabc"
			],
			[
				"m_S",
				"m_Sprite\tabc"
			],
			[
				"Draw",
				"DrawQuad\tabc"
			],
			[
				"m_Spr",
				"m_SpriteSheet\tabc"
			],
			[
				"GetTex",
				"GetTexCoords\t(SubTexture2D.h)"
			],
			[
				"m_Tex",
				"m_TexCoords\tabc"
			],
			[
				"Q",
				"QuadCount\t(Renderer2D.cpp)"
			],
			[
				"GetTot",
				"GetTotalIndexCount\t(renderer2d.h)"
			],
			[
				"Render",
				"Renderer2D\tabc"
			],
			[
				"Stat",
				"Statistics\tabc"
			],
			[
				"a_Tex",
				"a_TexIndex\tabc"
			],
			[
				"v_Tex",
				"v_TexIndex\tabc"
			],
			[
				"Quad",
				"QuadVertexBufferPtr\tabc"
			],
			[
				"TextureSlo",
				"TextureSlots\tabc"
			],
			[
				"TextureSlot",
				"TextureSlotIndex\tabc"
			],
			[
				"Max",
				"MaxIndices\tabc"
			],
			[
				"Ve",
				"Vertex\t(OpenGLBuffer.cpp)"
			],
			[
				"TU",
				"TURT_PROFILE_SCOPE\t(Sandbox2D.cpp)"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Turtle/src/Turtle/Scripting/LuaScriptBinder.cpp",
			"settings":
			{
				"buffer_size": 232,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Turtle/src/Turtle/Scene/Components.cpp",
			"settings":
			{
				"buffer_size": 14298,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Turtle/src/Turtle/Scene/Scene.h",
			"settings":
			{
				"buffer_size": 731,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Turtle/src/Turtle/Scene/Scene.cpp",
			"settings":
			{
				"buffer_size": 6912,
				"line_ending": "Windows"
			}
		},
		{
			"file": "TODO",
			"settings":
			{
				"buffer_size": 1145,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Turtle/src/Turtle/Scripting/LuaScriptBinder.h",
			"settings":
			{
				"buffer_size": 65,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "Tortuga/src/Panels/SceneHeirarchyPanel.cpp",
			"settings":
			{
				"buffer_size": 4198,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Turtle/src/Turtle/Scene/Components.h",
			"settings":
			{
				"buffer_size": 5960,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/User/Engine.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					""
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					""
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					"Run"
				],
				[
					"Packages/MSBuild selector/MSBuildSelector.sublime-build",
					""
				],
				[
					"Packages/Premake/Premake.sublime-build",
					""
				],
				[
					"Packages/Premake/Premake.sublime-build",
					"Run"
				],
				[
					"Packages/User/Engine.sublime-build",
					""
				],
				[
					"Packages/User/EngineRunExit.sublime-build",
					""
				]
			],
			[
				"Packages/MSBuild selector/MSBuildSelector.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					""
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					"Run"
				],
				[
					"Packages/Premake/Premake.sublime-build",
					""
				],
				[
					"Packages/Premake/Premake.sublime-build",
					"Run"
				],
				[
					"Packages/User/Engine.sublime-build",
					""
				],
				[
					"Packages/User/EngineRunExit.sublime-build",
					""
				]
			],
			[
				"Packages/User/Engine.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					""
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					"Run"
				],
				[
					"Packages/User/Engine.sublime-build",
					""
				]
			],
			[
				"Packages/User/Engine.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					""
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					"Run"
				],
				[
					"Packages/User/Engine.sublime-build",
					""
				],
				[
					"Packages/User/EngineRunExit.sublime-build",
					""
				]
			],
			[
				"Packages/User/Engine.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					""
				],
				[
					"Packages/C++ Starting Kit/C++ - Starting Kit.sublime-build",
					"Run"
				],
				[
					"Packages/User/callpremake.sublime-build",
					""
				],
				[
					"Packages/User/Engine.sublime-build",
					""
				],
				[
					"Packages/User/EngineRunExit.sublime-build",
					""
				]
			],
			[
				"Packages/User/Engine.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/MSBuild selector/MSBuildSelector.sublime-build",
					""
				],
				[
					"Packages/Premake/Premake.sublime-build",
					""
				],
				[
					"Packages/Premake/Premake.sublime-build",
					"Run"
				],
				[
					"Packages/User/Engine.sublime-build",
					""
				],
				[
					"Packages/User/EngineRunExit.sublime-build",
					""
				]
			],
			[
				"Packages/MSBuild selector/MSBuildSelector.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/User/callpremake.sublime-build",
					""
				],
				[
					"Packages/User/Engine.sublime-build",
					""
				],
				[
					"Packages/User/EngineRunExit.sublime-build",
					""
				]
			],
			[
				"Packages/User/Engine.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 94.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"key",
				"Preferences: Key Bindings"
			],
			[
				"sy",
				"Set Syntax: YAML"
			],
			[
				"build",
				"Build: New Build System"
			],
			[
				"theme",
				"UI: Select Color Scheme"
			],
			[
				"settings",
				"Preferences: Settings"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"proe",
				"Project: Edit"
			],
			[
				"c++",
				"Set Syntax: C++"
			],
			[
				"font",
				"Set Syntax: Font"
			],
			[
				"proj",
				"Project: Edit"
			],
			[
				"indentati",
				"Indentation: Convert to Tabs"
			],
			[
				"isntallp",
				"Package Control: Install Package"
			],
			[
				"git",
				"Set Syntax: Git Log"
			],
			[
				"chang",
				"Changelog"
			],
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"project",
				"Project: Edit"
			],
			[
				"premake",
				"Premake: Generate"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"wrap",
				"Word Wrap: Toggle"
			],
			[
				"indentation",
				"Indentation: Convert to Tabs"
			],
			[
				"save",
				"File: Save All"
			],
			[
				"reinde",
				"Indentation: Reindent Lines"
			],
			[
				"word",
				"Word Wrap: Toggle"
			],
			[
				"search",
				"File: Search Files"
			],
			[
				"python",
				"Set Syntax: Python"
			],
			[
				"insall",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"insal",
				"Package Control: Install Package"
			],
			[
				"settin",
				"Preferences: Settings"
			],
			[
				"reind",
				"Indentation: Reindent Lines"
			],
			[
				"c",
				"Set Syntax: C++"
			],
			[
				"mips",
				"Set Syntax: MIPS"
			],
			[
				"text",
				"Set Syntax: Plain Text"
			],
			[
				"mark",
				"Set Syntax: MultiMarkdown"
			],
			[
				"setting",
				"Preferences: Settings"
			],
			[
				"glsl",
				"Set Syntax: GLSL"
			],
			[
				"ard",
				"Set Syntax: Arduino"
			],
			[
				"ardui",
				"Set Syntax: Arduino"
			],
			[
				"plain",
				"Set Syntax: Plain Text"
			],
			[
				"xque",
				"Set Syntax: XQuery"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"plain t",
				"Set Syntax: Plain Text"
			],
			[
				"pac",
				"Package Control: Add Channel"
			],
			[
				"gls",
				"Set Syntax: GLSL"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"packa",
				"Install Package Control"
			]
		],
		"width": 496.0
	},
	"console":
	{
		"height": 194.0,
		"history":
		[
			"git"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/Austin/Desktop/Turtle",
		"/C/Users/Austin/Desktop/Turtle/Turtle",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scene",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scripting",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/yaml-cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/yaml-cpp/include"
	],
	"file_history":
	[
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/yaml-cpp/premake5.lua",
		"/C/Users/Austin/Desktop/Turtle/premake5.lua",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/lua/premake5.lua",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/lua/src/Makefile",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/imgui/premake5.lua",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/src/EditorLayer.cpp",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/src/EditorLayer.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scripting/ComponentLuaAPIs.h",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/src/Panels/SceneHeirarchyPanel.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scene/Components.h",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/src/Panels/TilePallettePanel.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scene/Scene.cpp",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/assets/scenes/test.turt",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/SubTexture2D.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scene/Scene.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/SubTexture2D.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scene/ComponentUI.cpp",
		"/C/Users/Austin/Desktop/Turtle/TODO",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scene/ComponentConnections.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scene/Entity.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scene/ScriptableEntity.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Core/Timestep.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scene/Components.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/OpenGL/OpenGLRendererAPI.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/imgui/imgui_demo.cpp",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/src/Panels/TilePallettePanel.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Utils/ImGuiUILib.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/imgui/LICENSE.txt",
		"/C/Users/Austin/Desktop/Swig/LICENSE-GPL",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/spdlog/LICENSE",
		"/C/Users/Austin/Desktop/Swig/LICENSE",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/imgui/imgui.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/imgui/imgui.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Utils/ImGuiUILib.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scene/ComponentSerializers.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/Windows/WindowsPlatformUtils.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Utils/PlatformUtils.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Core/KeyCodes.h",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/assets/scenes/Example.turt",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/SceneDump.yaml",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/ImGui/ImGuiLayer.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Core/AssetManager.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/Texture.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/OpenGL/OpenGLTexture.h",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/src/Panels/FileSelector.cpp",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/src/Panels/FileSelector.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/entt/include/entt.hpp",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/SceneDump.json",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Core/Application.cpp",
		"/C/Users/Austin/AppData/Roaming/Sublime Text 3/Packages/User/Engine.sublime-build",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/ParticleSpawner.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/renderer2d.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/Renderer2D.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/ParticleSpawner.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/imgui/imgui_internal.h",
		"/C/Users/Austin/AppData/Local/Temp/7zODD4B.tmp/README.txt",
		"/C/Users/Austin/AppData/Local/Temp/7zO38A8.tmp/OFL.txt",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/src/Panels/ComponentSelectPanel.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/Shader.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Core/AssetManager.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/OpenGL/OpenGLTexture.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/Renderer.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/Texture.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Core/Window.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/Windows/WindowsWindow.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/Renderer.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Core/Core.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/Buffer.cpp",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/src/Panels/ComponentAddPanel.cpp",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/imgui.ini",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/test.txt",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/src/Panels/SceneHeira",
		"/C/Users/Austin/Desktop/Turtle/Win-GenProjects.bat",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/imgui/examples/imgui_examples.sln",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scene/Entity.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scene/SceneCamera.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Scene/SceneCamera.h",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/src/Panels/ComponentAddPanel.h",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/src/Panels/SceneHeirarchyPanel.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/ImGui/ImGuiLayer.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/OrthographicCameraController.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Core/TextureManager.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Core/TextureManager.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/Camera.h",
		"/C/Users/Austin/Desktop/Turt/.git/index",
		"/C/Users/Austin/Desktop/Turtle/.git/config",
		"/C/Users/Austin/Desktop/Turt/.git/config",
		"/C/Users/Austin/Desktop/Turt/LICENSE",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Core/Application.h",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/src/TortugaApp.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/OpenGL/OpenGLFramebuffer.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/GraphicsContext.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/OpenGL/openglcontext.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/OpenGL/OpenGLRendererAPI.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Debug/Instrumentor.h",
		"/C/Users/Austin/Desktop/Turtle/Sandbox/src/Sandbox2D.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Events/Event.h",
		"/C/Users/Austin/AppData/Roaming/Sublime Text 3/Packages/User/callpremake.sublime-build",
		"/C/Users/Austin/Desktop/Turtle/Turtle.sublime-project",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/turtpch.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/Shader.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/VertexArray.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/Buffer.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/vendor/glm/test/core/core_func_geometric.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/Framebuffer.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/VertexArray.h",
		"/C/Users/Austin/Desktop/Turtle/Tortuga/assets/shaders/Texture.glsl",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/Framebuffer.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/OpenGL/OpenGLContext.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Core/input.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/OrthographicCameraController.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/OpenGL/OpenGLFramebuffer.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/RendererAPI.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/Windows/WindowsInput.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/Windows/WindowsInput.h",
		"/C/Users/Austin/Desktop/Turtle/Sandbox/assets/shaders/Texture.glsl",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Core/EntryPoint.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/OrthographicCamera.h",
		"/C/Users/Austin/Desktop/Turtle/Sandbox/src/sandbox2d.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Core/Window.cpp",
		"/C/Users/Austin/Desktop/Turtle/Sandbox/src/SandboxApp.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/OpenGL/OpenGLShader.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/OpenGL/OpenGLShader.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Renderer/RenderCommand.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/OpenGL/OpenGLBuffer.cpp",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Platform/OpenGL/OpenGLBuffer.h",
		"/C/Users/Austin/Desktop/Turtle/Turtle/src/Turtle/Application.cpp"
	],
	"find":
	{
		"height": 70.0
	},
	"find_in_files":
	{
		"height": 167.0,
		"where_history":
		[
			"*.h,*.cpp",
			"*.h,*.cpp,-vendor*",
			"*.h,*.cpp,-<project>/Turtle/vendor",
			"*.h,*.cpp,-<project>",
			"*.h,*.cpp,<project>",
			"*.h,*.cpp, -vendor",
			"*.h,*.cpp",
			"-*.cpp",
			"-./*.cpp",
			"-./*",
			"-./vendor/*",
			"-./vendor",
			"",
			"<project>, -C:\\Users\\Austin\\Desktop\\Turtle\\Turtle\\vendor\\*",
			"<project>, - .\\Turtle\\vendor\\*",
			"<project>",
			"-**\\vendor",
			"-*\\vendor",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"\"",
			"GlobalMetaFunctionsComponent",
			"rttr::registration",
			"rttr",
			"int",
			"text",
			"area",
			"SceneHeirarchyPanel",
			"#include \"Turtle/Scene/Components.h\"\n#include \"Turtle/Core/AssetManager.h\"\n",
			"AddComponent",
			"RegisterComponent",
			"ImGuiWindowFlags",
			"OnCameraAdd",
			"SelectedY",
			"DisplayPallette",
			"TileSet",
			"tileSet",
			"TileSet",
			"tileSet",
			"TileSet",
			"tileSet",
			"TileSet",
			"tileSet",
			"TileSet",
			"tileSet",
			"TileSet",
			"tileSet",
			"TileSet",
			"tileSet",
			"TileSet",
			"tileSet",
			"TileSet",
			"tileSet",
			"TileSet",
			"tileSet",
			"TileSet",
			"TileHeight",
			"TileWidth",
			"Particle.",
			"Camera.",
			"Camera",
			"entity.RemoveComponent",
			"RendererID",
			"DrawUI",
			"void DrawUI",
			"popup",
			"beginpopup",
			"DrawUI()\n\t{",
			"}\n",
			"entity",
			"spriteComponent.",
			"entity",
			"entity.RemoveComponent",
			"camera.",
			"cameraComponent.",
			"nativeScriptComponent.",
			"particle.",
			"particle",
			"particleSpawnerComponent",
			"gridComponent",
			"displayPallette",
			"selection[1]",
			"selection[0]",
			"Width",
			"width",
			"tileSetComponent.",
			"TileHeight",
			"TileHEight",
			"m_Selected[1]",
			"m_Selected[0]",
			".get()",
			"TileSet",
			"m_Texture",
			"m_TileSize[1]",
			"m_TileSize[0]",
			"m_TileSize[0",
			"m_TilePallette",
			"transformComponent.",
			"Deserialize",
			"Deserialize(YAML::Node& data, Entity entity)",
			"void DrawUI()",
			"DrawUI",
			"void Deserialize",
			"Deserialize",
			"TagComponent",
			"HashedString",
			"TagComponent",
			"test",
			">();\n",
			".type(",
			"BLEND",
			"REmovecomponent",
			" texCorods[0] <<",
			"Removecomponent",
			"Positions",
			"Tint",
			"(e)",
			"e",
			"onst std::string&",
			"Hazel Scene (*.hazel)\\0*.hazel\\0",
			"const std::string& filepath",
			"Hazel",
			"ImGui::Render",
			"ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());",
			"ImGui::Render",
			"render",
			"Imgui::render",
			"endchild",
			"const std::string&",
			"m_SceneHeirarchyPanel",
			"m_SceneHierarchyPanel",
			"m_SceneHeirarchyPanel",
			"m_SceneHeirarchy",
			"m_SceneHierarchyPanel",
			"oncameraADd",
			"particleSpawnerComponenet",
			"ParticleSpawnerComponenet",
			"particleSpawnerComponenet",
			"ParticleSpawnerComponenet",
			"tileSetComponenet",
			"TileSetComponenet",
			"tileSetComponenet",
			"TileSetComponenet",
			"ParticleSpawnerComponenet",
			"ParticleSpawnerComponent",
			"VelocityVariation",
			"ColorBegin",
			"Begin"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Turtle/src/Turtle/Scripting/LuaScriptBinder.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 232,
						"regions":
						{
						},
						"selection":
						[
							[
								232,
								232
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Turtle/src/Turtle/Scene/Components.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14298,
						"regions":
						{
						},
						"selection":
						[
							[
								4700,
								4700
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										5506,
										5507
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										4566,
										4567
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2873.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Turtle/src/Turtle/Scene/Scene.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 731,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Turtle/src/Turtle/Scene/Scene.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6912,
						"regions":
						{
						},
						"selection":
						[
							[
								4974,
								4974
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										5054,
										5055
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										4908,
										4909
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3111.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "TODO",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1145,
						"regions":
						{
						},
						"selection":
						[
							[
								844,
								834
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Turtle/src/Turtle/Scripting/LuaScriptBinder.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 65,
						"regions":
						{
						},
						"selection":
						[
							[
								65,
								65
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										64,
										65
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										60,
										61
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"open_with_edit": true,
							"syntax": "Packages/C++/C++.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Tortuga/src/Panels/SceneHeirarchyPanel.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4198,
						"regions":
						{
						},
						"selection":
						[
							[
								3196,
								3196
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3343,
										3344
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										2924,
										2925
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1989.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Turtle/src/Turtle/Scene/Components.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5960,
						"regions":
						{
						},
						"selection":
						[
							[
								5540,
								5540
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										5585,
										5586
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"region.purplish"
									]
								},
								"open":
								{
									"1":
									[
										5456,
										5457
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content"
							],
							"syntax": "Packages/C++/C++.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3204.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 75.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.exec":
	{
		"height": 292.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Turtle.sublime-project",
	"replace":
	{
		"height": 50.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"TODO",
				"TODO"
			],
			[
				"scene.cpp",
				"Turtle\\src\\Turtle\\Scene\\Scene.cpp"
			],
			[
				"scene.h",
				"Turtle\\src\\Turtle\\Scene\\Scene.h"
			],
			[
				"premake",
				"Turtle\\vendor\\yaml-cpp\\premake5.lua"
			],
			[
				"prem",
				"premake5.lua"
			],
			[
				"comp",
				"Turtle\\src\\Turtle\\Scene\\Components.cpp"
			],
			[
				"component",
				"Turtle\\src\\Turtle\\Scene\\Components.h"
			],
			[
				"scene",
				"Tortuga\\src\\Panels\\SceneHeirarchyPanel.cpp"
			],
			[
				"componen",
				"Turtle\\src\\Turtle\\Scene\\Components.cpp"
			],
			[
				"imguidemo",
				"Turtle\\vendor\\imgui\\imgui_demo.cpp"
			],
			[
				"imguidem",
				"Turtle\\vendor\\imgui\\imgui_demo.cpp"
			],
			[
				"todo",
				"TODO"
			],
			[
				"compo",
				"Turtle\\src\\Turtle\\Scene\\Components.h"
			],
			[
				"components",
				"Turtle\\src\\Turtle\\Scene\\Components.cpp"
			],
			[
				"componenc",
				"Turtle\\src\\Turtle\\Scene\\ComponentConnections.cpp"
			],
			[
				"scripta",
				"Turtle\\src\\Turtle\\Scene\\ScriptableEntity.h"
			],
			[
				"entity",
				"Turtle\\src\\Turtle\\Scene\\Entity.h"
			],
			[
				"editor",
				"Tortuga\\src\\EditorLayer.h"
			],
			[
				"compne",
				"Turtle\\src\\Turtle\\Scene\\Components.h"
			],
			[
				"componentu",
				"Turtle\\src\\Turtle\\Scene\\ComponentUI.cpp"
			],
			[
				"imguide",
				"Turtle\\vendor\\imgui\\imgui_demo.cpp"
			],
			[
				"scene.cp",
				"Turtle\\src\\Turtle\\Scene\\Scene.cpp"
			],
			[
				"editorla",
				"Tortuga\\src\\EditorLayer.cpp"
			],
			[
				"componentui",
				"Turtle\\src\\Turtle\\Scene\\ComponentUI.cpp"
			],
			[
				"imgui.c",
				"Turtle\\vendor\\imgui\\imgui.cpp"
			],
			[
				"imgui.h",
				"Turtle\\vendor\\imgui\\imgui.h"
			],
			[
				"compone",
				"Turtle\\src\\Turtle\\Scene\\ComponentUI.cpp"
			],
			[
				"imgui",
				"Turtle\\src\\Turtle\\Utils\\ImGuiUILib.h"
			],
			[
				"tilepalle",
				"Tortuga\\src\\Panels\\TilePallettePanel.h"
			],
			[
				"test.",
				"Tortuga\\assets\\scenes\\test.turt"
			],
			[
				"subte",
				"Turtle\\src\\Turtle\\Renderer\\SubTexture2D.h"
			],
			[
				"subtexture",
				"Turtle\\src\\Turtle\\Renderer\\SubTexture2D.cpp"
			],
			[
				"",
				"Tortuga\\src\\Panels\\SceneHeirarchyPanel.h"
			],
			[
				"test",
				"Tortuga\\assets\\scenes\\test.turt"
			],
			[
				"componentser",
				"Turtle\\src\\Turtle\\Scene\\ComponentSerializers.cpp"
			],
			[
				"turtle",
				"Turtle\\src\\Turtle.h"
			],
			[
				"KEYCODE",
				"Turtle\\src\\Turtle\\Core\\KeyCodes.h"
			],
			[
				"scenehei",
				"Tortuga\\src\\Panels\\SceneHeirarchyPanel.cpp"
			],
			[
				"windowspla",
				"Turtle\\src\\Platform\\Windows\\WindowsPlatformUtils.cpp"
			],
			[
				"pla",
				"Turtle\\src\\Turtle\\Utils\\PlatformUtils.h"
			],
			[
				"scenedump",
				"Tortuga\\SceneDump.yaml"
			],
			[
				"edit",
				"Tortuga\\src\\EditorLayer.cpp"
			],
			[
				"editorlayer",
				"Tortuga\\src\\EditorLayer.cpp"
			],
			[
				"filesele",
				"Tortuga\\src\\Panels\\FileSelector.cpp"
			],
			[
				"filesel",
				"Tortuga\\src\\Panels\\FileSelector.h"
			],
			[
				"fils",
				"Tortuga\\src\\Panels\\FileSelector.h"
			],
			[
				"filesl",
				"Tortuga\\src\\Panels\\FileSelector.cpp"
			],
			[
				"imguilay",
				"Turtle\\src\\Turtle\\ImGui\\ImGuiLayer.cpp"
			],
			[
				"filesle",
				"Tortuga\\src\\Panels\\FileSelector.cpp"
			],
			[
				"imguil",
				"Turtle\\src\\Turtle\\ImGui\\ImGuiLayer.cpp"
			],
			[
				"imguilayer",
				"Turtle\\src\\Turtle\\ImGui\\ImGuiLayer.cpp"
			],
			[
				"file sle",
				"Tortuga\\src\\Panels\\FileSelector.cpp"
			],
			[
				"componenet",
				"Turtle\\src\\Turtle\\Scene\\ComponentSerializers.cpp"
			],
			[
				"assetma",
				"Turtle\\src\\Turtle\\Core\\AssetManager.cpp"
			],
			[
				"opengltexture",
				"Turtle\\src\\Platform\\OpenGL\\OpenGLTexture.h"
			],
			[
				"texture.h",
				"Turtle\\src\\Turtle\\Renderer\\Texture.h"
			],
			[
				"sceneheir",
				"Tortuga\\src\\Panels\\SceneHeirarchyPanel.cpp"
			],
			[
				".yaml",
				"Tortuga\\SceneDump.yaml"
			],
			[
				"entt",
				"Turtle\\vendor\\entt\\include\\entt.hpp"
			],
			[
				"entt.h",
				"Turtle\\vendor\\entt\\include\\entt.hpp"
			],
			[
				"EDITOR",
				"Tortuga\\src\\EditorLayer.cpp"
			],
			[
				"assetman",
				"Turtle\\src\\Turtle\\Core\\AssetManager.cpp"
			],
			[
				"texture",
				"Turtle\\src\\Turtle\\Renderer\\Texture.h"
			],
			[
				"scen",
				"Tortuga\\SceneDump.json"
			],
			[
				"Scene.cpp",
				"Turtle\\src\\Turtle\\Scene\\Scene.cpp"
			],
			[
				"ditor",
				"Tortuga\\src\\EditorLayer.cpp"
			],
			[
				"edito",
				"Tortuga\\src\\EditorLayer.cpp"
			],
			[
				"applicaiton",
				"Turtle\\src\\Turtle\\Core\\Application.cpp"
			],
			[
				"entt.hpp",
				"Turtle\\vendor\\entt\\include\\entt.hpp"
			],
			[
				"application",
				"Turtle\\src\\Turtle\\Core\\Application.cpp"
			],
			[
				"particlespa",
				"Turtle\\src\\Turtle\\Renderer\\ParticleSpawner.h"
			],
			[
				"particle",
				"Turtle\\src\\Turtle\\Renderer\\ParticleSpawner.cpp"
			],
			[
				"renderer2d",
				"Turtle\\src\\Turtle\\Renderer\\renderer2d.h"
			],
			[
				"Entity",
				"Turtle\\src\\Turtle\\Scene\\Entity.h"
			],
			[
				"componentSele",
				"Tortuga\\src\\Panels\\ComponentSelectPanel.cpp"
			],
			[
				"Scene",
				"Turtle\\src\\Turtle\\Scene\\Scene.cpp"
			],
			[
				"window",
				"Turtle\\src\\Turtle\\Core\\Window.h"
			],
			[
				"windowswindo",
				"Turtle\\src\\Platform\\Windows\\WindowsWindow.cpp"
			],
			[
				"TODo",
				"TODO"
			],
			[
				"renderer.h",
				"Turtle\\src\\Turtle\\Renderer\\Renderer.h"
			],
			[
				"renderer",
				"Turtle\\src\\Turtle\\Renderer\\Renderer.cpp"
			],
			[
				"rednerer2d",
				"Turtle\\src\\Turtle\\Renderer\\renderer2d.h"
			],
			[
				"renderer.",
				"Turtle\\src\\Turtle\\Renderer\\Renderer.cpp"
			],
			[
				"texturemanager",
				"Turtle\\src\\Turtle\\Core\\TextureManager.h"
			],
			[
				".ini",
				"Tortuga\\imgui.ini"
			],
			[
				"imgui_demo",
				"Turtle\\vendor\\imgui\\imgui_demo.cpp"
			],
			[
				"imgui_",
				"Turtle\\vendor\\imgui\\imgui_demo.cpp"
			],
			[
				"imggui_",
				"Turtle\\vendor\\imgui\\imgui_demo.cpp"
			],
			[
				"core",
				"Turtle\\src\\Turtle\\Core\\Core.h"
			],
			[
				"componentadd",
				"Tortuga\\src\\Panels\\ComponentAddPanel.cpp"
			],
			[
				"imgui_examp",
				"Turtle\\vendor\\imgui\\examples\\imgui_examples.sln"
			],
			[
				"sceneheri",
				"Tortuga\\src\\Panels\\SceneHeirarchyPanel.cpp"
			],
			[
				"scenecamera",
				"Turtle\\src\\Turtle\\Scene\\SceneCamera.cpp"
			],
			[
				"entit",
				"Turtle\\src\\Turtle\\Scene\\Entity.h"
			],
			[
				"entity.",
				"Turtle\\src\\Turtle\\Scene\\Entity.cpp"
			],
			[
				"scene.",
				"Turtle\\src\\Turtle\\Scene\\Scene.h"
			],
			[
				"core.h",
				"Turtle\\src\\Turtle\\Core\\Core.h"
			],
			[
				"SceneCamera",
				"Turtle\\src\\Turtle\\Scene\\SceneCamera.h"
			],
			[
				"imgui_dem",
				"Turtle\\vendor\\imgui\\imgui_demo.cpp"
			],
			[
				"imguidemp",
				"Turtle\\vendor\\imgui\\imgui_demo.cpp"
			],
			[
				"orthograp",
				"Turtle\\src\\Turtle\\Renderer\\OrthographicCameraController.cpp"
			],
			[
				"camera",
				"Turtle\\src\\Turtle\\Renderer\\Camera.h"
			],
			[
				"scenecamer",
				"Turtle\\src\\Turtle\\Scene\\SceneCamera.h"
			],
			[
				"texturemana",
				"Turtle\\src\\Turtle\\Core\\TextureManager.h"
			],
			[
				"imguilayer.h",
				"Turtle\\src\\Turtle\\ImGui\\ImGuiLayer.h"
			],
			[
				"imguila",
				"Turtle\\src\\Turtle\\ImGui\\ImGuiLayer.cpp"
			],
			[
				"Renderer2d",
				"Turtle\\src\\Turtle\\Renderer\\renderer2d.h"
			],
			[
				"tortuga",
				"Tortuga\\src\\TortugaApp.cpp"
			],
			[
				"texture.cpp",
				"Turtle\\src\\Turtle\\Renderer\\Texture.cpp"
			],
			[
				"Textuer",
				"Turtle\\src\\Turtle\\Renderer\\Texture.h"
			],
			[
				"subtex",
				"Turtle\\src\\Turtle\\Renderer\\SubTexture2D.cpp"
			],
			[
				"renderer2d.h",
				"Turtle\\src\\Turtle\\Renderer\\renderer2d.h"
			],
			[
				"opengltexture.",
				"Turtle\\src\\Platform\\OpenGL\\OpenGLTexture.cpp"
			],
			[
				"texture2d",
				"Turtle\\src\\Turtle\\Renderer\\SubTexture2D.h"
			],
			[
				"camera.h",
				"Turtle\\src\\Turtle\\Renderer\\Camera.h"
			],
			[
				"sceneher",
				"Tortuga\\src\\Panels\\SceneHeirarchyPanel.cpp"
			],
			[
				"openglren",
				"Turtle\\src\\Platform\\OpenGL\\OpenGLRendererAPI.cpp"
			],
			[
				"graphic",
				"Turtle\\src\\Turtle\\Renderer\\GraphicsContext.h"
			],
			[
				"Turtle",
				"Turtle\\src\\Turtle.h"
			],
			[
				"ent",
				"Turtle\\src\\Turtle\\Scene\\Entity.h"
			],
			[
				"ins",
				"Turtle\\src\\Turtle\\Debug\\Instrumentor.h"
			],
			[
				"open",
				"Turtle\\src\\Platform\\OpenGL\\OpenGLFramebuffer.cpp"
			],
			[
				"sandbox2d",
				"Sandbox\\src\\Sandbox2D.cpp"
			],
			[
				"rendere",
				"Turtle\\src\\Turtle\\Renderer\\renderer2d.h"
			],
			[
				"Rednere",
				"Turtle\\src\\Turtle\\Renderer\\renderer2d.h"
			],
			[
				"core.",
				"Turtle\\src\\Turtle\\Core\\Core.h"
			],
			[
				"compon",
				"Turtle\\src\\Turtle\\Scene\\Components.h"
			],
			[
				"entt.",
				"Turtle\\vendor\\entt\\include\\entt.hpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 322.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
